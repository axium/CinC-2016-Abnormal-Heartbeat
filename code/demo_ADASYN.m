%-------------------------------------------------------------------------
% ADASYN demo script
%-------------------------------------------------------------------------
%
% this file demonstrates usage and effect of ADASYN.m
% feel free to modify the parameters of the input data as well as the
% method.
%
%
%-------------------------------------------------------------------------
% Version: 1.0
% Date: 2015-04-17
% Author: Dominic Siedhoff
%-------------------------------------------------------------------------
%
%
%-------------------------------------------------------------------------
% Copyright (c) 2015 Dominic Siedhoff
%-------------------------------------------------------------------------
%
% License: This software may be freely used, shared and modified. It must
%          not be sold. It is provided without any explicit or implicit
%          warranty of any kind. This license text must be included with
%          every copy made.
%
%-------------------------------------------------------------------------



% DATA GENERATION: generate two classes in a 2D feature space:

%make results reproducible by resetting the random number generator:
rng('default');

%numbers of examples in the two classes
numEx0 = 500;       %minority class
numEx1 = 10000;     %majority class

if numEx0 > numEx1
    error('demo_ADASYN: numEx0 must be smaller than numEx1, otherwise the text in the plots will confuse minority with majority.');
end

%class centers
center0 = [2.5 2.5];
center1 = [3 3];

%class standard deviations:
%anisotropic Guassian as minority class best illustrates the effect of
%setting adasyn_featuresAreNormalized (cf. below) true resp. false:
stds0 = [0.1 0.4];
stds1 = [0.2 0.2];

%class labels:
labels0 = false([numEx0 1]);
labels1 = true ([numEx1 1]);

%generate features as Gaussian random variables with standard deviations
%per dimension as according to stds0 resp. stds1 and mean values as
%according to center0 resp. center1:
features0 = [...
    center0(1) + randn([numEx0 1])*stds0(1)...
    center0(2) + randn([numEx0 1])*stds0(2)...
    ];
features1 = [...
    center1(1) + randn([numEx1 1])*stds1(1)...
    center1(2) + randn([numEx1 1])*stds1(2)...
    ];



% ADASYN: set up ADASYN parameters and call the function:

adasyn_features                 = [features0; features1];
adasyn_labels                   = [labels0  ; labels1  ];
adasyn_beta                     = [];   %let ADASYN choose default
adasyn_kDensity                 = [];   %let ADASYN choose default
adasyn_kSMOTE                   = [];   %let ADASYN choose default
adasyn_featuresAreNormalized    = false;    %false lets ADASYN handle normalization
    
[adasyn_featuresSyn, adasyn_labelsSyn] = ADASYN(adasyn_features, adasyn_labels, adasyn_beta, adasyn_kDensity, adasyn_kSMOTE, adasyn_featuresAreNormalized);



% PLOTTING:

%plot input data:
figure;
hold on;
plot(features0(:,1), features0(:,2), 'r.');
plot(features1(:,1), features1(:,2), 'b.');
title('input point sets');
legend({['minority class (' num2str(numEx0) ' examples)'] ['majority class (' num2str(numEx1) ' examples)']});
xlabel('feature_1');
ylabel('feature_2');
axis('equal');
hold off;

%plot synthesized examples in green:
figure;
hold on;
plot(adasyn_featuresSyn(:,1), adasyn_featuresSyn(:,2), 'g.');
plot(features0(:,1), features0(:,2), 'r.');
plot(features1(:,1), features1(:,2), 'b.');
title('input point sets and synthetic points generated by ADASYN');
legend({['synthetic minority class (' num2str(size(adasyn_featuresSyn,1)) ' examples)'] ['minority class (' num2str(numEx0) ' examples)'] ['majority class (' num2str(numEx1) ' examples)']});
xlabel('feature_1');
ylabel('feature_2');
axis('equal');
hold off;



